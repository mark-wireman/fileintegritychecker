.TH "C:/Users/mark_/source/repos/fileintegritychecker/src/fileintegritychecker.cpp" 3 "Sun Jan 1 2023" "Version 1.0" "File Integrity Checker" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/mark_/source/repos/fileintegritychecker/src/fileintegritychecker.cpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./headers/fileintegritychecker\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAXCHAR\fP   100000"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename TP > std::time_t \fBto_time_t\fP (TP tp)"
.br
.ti -1c
.RI "char * \fBto_char_time_t\fP (std::time_t time)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MAXCHAR   100000"

.SH "Function Documentation"
.PP 
.SS "char * to_char_time_t (std::time_t time)"

.PP
.nf
20 {
21     string retVal;
22     char* char_array;
23 
24     tm* now = localtime(&time);
25     char date_string[100];
26     char time_string[100];
27 
28     strftime(date_string, 50, "%B %d, %Y ", now);
29     strftime(time_string, 50, "%T", now);
30 
31     retVal += date_string;
32     retVal += time_string;
33 
34     int n = retVal\&.length();
35     char_array = new char[n + 1];
36 
37     strcpy(char_array, retVal\&.c_str());
38 
39     return char_array;
40 }
.fi
.SS "template<typename TP > std::time_t to_time_t (TP tp)"

.PP
.nf
12 {
13     using namespace std::chrono;
14     auto sctp = time_point_cast<system_clock::duration>(tp - TP::clock::now()
15         + system_clock::now());
16     return system_clock::to_time_t(sctp);
17 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for File Integrity Checker from the source code\&.
