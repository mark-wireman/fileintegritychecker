<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_h_a256_c_p_p_8h_source" xml:lang="en-US">
<title>SHA256CPP.h</title>
<indexterm><primary>C:/Users/mark_/source/repos/fileintegritychecker/headers/SHA256CPP.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;HEADERS_SHA256CPP_H_</emphasis>
2 <emphasis role="preprocessor">#define&#32;HEADERS_SHA256CPP_H_</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;inttypes.h&gt;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;stdbool.h&gt;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
10 
11 <emphasis role="preprocessor">#define&#32;byteSwap32(x)&#32;(((x)&#32;&gt;&gt;&#32;24)&#32;|&#32;(((x)&amp;0x00FF0000)&#32;&gt;&gt;&#32;8)&#32;|&#32;(((x)&amp;0x0000FF00)&#32;&lt;&lt;&#32;8)&#32;|&#32;((x)&#32;&lt;&lt;&#32;24))</emphasis>
12 <emphasis role="preprocessor">#define&#32;byteSwap64(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;((((x)&#32;&gt;&gt;&#32;56)&#32;&amp;&#32;0x00000000000000FF)&#32;|&#32;(((x)&#32;&gt;&gt;&#32;40)&#32;&amp;&#32;0x000000000000FF00)&#32;|&#32;\</emphasis>
14 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(((x)&#32;&gt;&gt;&#32;24)&#32;&amp;&#32;0x0000000000FF0000)&#32;|&#32;(((x)&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0x00000000FF000000)&#32;|&#32;&#32;\</emphasis>
15 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(((x)&#32;&lt;&lt;&#32;8)&#32;&amp;&#32;0x000000FF00000000)&#32;|&#32;(((x)&#32;&lt;&lt;&#32;24)&#32;&amp;&#32;0x0000FF0000000000)&#32;|&#32;&#32;\</emphasis>
16 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(((x)&#32;&lt;&lt;&#32;40)&#32;&amp;&#32;0x00FF000000000000)&#32;|&#32;(((x)&#32;&lt;&lt;&#32;56)&#32;&amp;&#32;0xFF00000000000000))</emphasis>
17 <emphasis role="comment">//&#32;Tell&#32;our&#32;preprocessor&#32;to&#32;create&#32;a&#32;variable&#32;MAXCHAR&#32;with&#32;value&#32;of&#32;100000</emphasis>
18 <emphasis role="preprocessor">#define&#32;MAXCHAR&#32;100000</emphasis>
19 
20 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_hash_values">HashValues</link>&#32;{
21 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_struct_hash_values_1a33327f22884b787dcb01088a9fb847a4">H</link>[8];
22 };
23 
24 <emphasis role="comment">//&#32;Define&#32;a&#32;union&#32;for&#32;easy&#32;reference</emphasis>
25 <emphasis role="comment">//&#32;Union&#32;represents&#32;a&#32;message&#32;block</emphasis>
26 <emphasis role="keyword">union&#32;</emphasis><link linkend="_unionmessage_block">messageBlock</link>
27 {
28 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[64];
29 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_unionmessage_block_1a3a07b88e31bce5184238c481aa255922">t</link>[16];
30 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_unionmessage_block_1a650ca0815e457fcda932238399372548">s</link>[8];
31 };
32 
33 <emphasis role="comment">//&#32;ENUM&#32;to&#32;control&#32;state&#32;of&#32;the&#32;program</emphasis>
34 <emphasis role="keyword">enum</emphasis>&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959">status</link>
35 {
36 &#32;&#32;&#32;&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959acb9be765f361bb7efb9073730aac92c6">READ</link>,&#32;
37 &#32;&#32;&#32;&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a24c954e013ccb8f230031742d8193f55">PAD0</link>,
38 &#32;&#32;&#32;&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a7af380b5255ed8fbb4f1943b92048b15">PAD1</link>,
39 &#32;&#32;&#32;&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a8b9af67858708d770f017e4aae85900d">FINISH</link>
40 };
41 
42 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_s_h_a256_c_p_p">SHA256CPP</link>&#32;
43 {
44 <emphasis role="keyword">public</emphasis>:
45 &#32;&#32;&#32;&#32;<link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP</link>();
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1aff6f658beaeaa61fb3f31bc0c8517be6">~SHA256CPP</link>();
47 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1acd60e2902a86486cd8c0c730b22ec34d">endianCheck</link>();
48 &#32;&#32;&#32;&#32;<link linkend="_struct_hash_values">HashValues</link>&#32;<link linkend="_class_s_h_a256_c_p_p_1a9466f56550cb9725c8fd6be92e5c1b77">calculateHash</link>(FILE&#32;*file);
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1accf77858eb3d4019f13d1e9c40dc9a73">printFileContents</link>(FILE&#32;*fileForPrinting);
50 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1af6bbbbc8eb2d1d2ce127d9ee41f80d43">endianCheckPrint</link>();
51 
52 <emphasis role="keyword">private</emphasis>:
53 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1ac70dfb32d56867b6f8790242c3202c06">sig0</link>(uint32_t&#32;x);
54 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1ad8bbe4f9babe02201d94d63fd65cc832">sig1</link>(uint32_t&#32;x);
55 
56 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(uint32_t&#32;n,&#32;uint16_t&#32;x);
57 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1a0ba361bc6a4f925454dfcd14fcb95f58">shr</link>(uint32_t&#32;n,&#32;uint16_t&#32;x);
58 
59 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1ae5224ffbd7fb6ab5d05a846e3c7e4bd3">SIG0</link>(uint32_t&#32;x);
60 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1ad8ea0d3bc89a2622dd230b9fb42c8463">SIG1</link>(uint32_t&#32;x);
61 
62 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1a4f63d4fc8d0f9267cd3d4c70fb61b2f3">Ch</link>(uint32_t&#32;x,uint32_t&#32;y,uint32_t&#32;z);
63 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_s_h_a256_c_p_p_1a76c44344a60f168d02bf8a5888bf02ad">Maj</link>(uint32_t&#32;x,uint32_t&#32;y,uint32_t&#32;z);
64 &#32;&#32;&#32;&#32;
65 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1a5064c84992660bbd9e98f46511d780d8">calcFileSize</link>(FILE&#32;*file);
66 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_s_h_a256_c_p_p_1af0be644c9e466da786edad451fb16c14">fillMessageBlock</link>(FILE&#32;*file,&#32;<emphasis role="keyword">union</emphasis>&#32;<link linkend="_unionmessage_block">messageBlock</link>&#32;*msgBlock,&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959">status</link>&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>,&#32;uint64_t&#32;*numBits);
67 };
68 
69 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;HEADERS_SHA256CPP_H_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
