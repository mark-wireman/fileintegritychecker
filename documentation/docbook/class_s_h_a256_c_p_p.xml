<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_s_h_a256_c_p_p" xml:lang="en-US">
<title>SHA256CPP Class Reference</title>
<indexterm><primary>SHA256CPP</primary></indexterm>
<para>
<computeroutput>#include &lt;SHA256CPP.h&gt;</computeroutput>
</para>
Collaboration diagram for SHA256CPP:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP</link> ()</para>

<para>Construct a new <link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP::SHA256CPP</link> object. </para>
</listitem>
            <listitem><para>virtual <link linkend="_class_s_h_a256_c_p_p_1aff6f658beaeaa61fb3f31bc0c8517be6">~SHA256CPP</link> ()</para>

<para>Destroy the <link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP::SHA256CPP</link> object. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_s_h_a256_c_p_p_1acd60e2902a86486cd8c0c730b22ec34d">endianCheck</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_hash_values">HashValues</link> <link linkend="_class_s_h_a256_c_p_p_1a9466f56550cb9725c8fd6be92e5c1b77">calculateHash</link> (FILE *file)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_h_a256_c_p_p_1accf77858eb3d4019f13d1e9c40dc9a73">printFileContents</link> (FILE *fileForPrinting)</para>
</listitem>
            <listitem><para>void <link linkend="_class_s_h_a256_c_p_p_1af6bbbbc8eb2d1d2ce127d9ee41f80d43">endianCheckPrint</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1ac70dfb32d56867b6f8790242c3202c06">sig0</link> (uint32_t x)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1ad8bbe4f9babe02201d94d63fd65cc832">sig1</link> (uint32_t x)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link> (uint32_t n, uint16_t x)</para>

<para>Rotate bits right. </para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1a0ba361bc6a4f925454dfcd14fcb95f58">shr</link> (uint32_t n, uint16_t x)</para>

<para>Shift bits right. </para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1ae5224ffbd7fb6ab5d05a846e3c7e4bd3">SIG0</link> (uint32_t x)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1ad8ea0d3bc89a2622dd230b9fb42c8463">SIG1</link> (uint32_t x)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1a4f63d4fc8d0f9267cd3d4c70fb61b2f3">Ch</link> (uint32_t x, uint32_t y, uint32_t z)</para>

<para>Choose. </para>
</listitem>
            <listitem><para>uint32_t <link linkend="_class_s_h_a256_c_p_p_1a76c44344a60f168d02bf8a5888bf02ad">Maj</link> (uint32_t x, uint32_t y, uint32_t z)</para>

<para>Majority decision. </para>
</listitem>
            <listitem><para>int <link linkend="_class_s_h_a256_c_p_p_1a5064c84992660bbd9e98f46511d780d8">calcFileSize</link> (FILE *file)</para>
</listitem>
            <listitem><para>int <link linkend="_class_s_h_a256_c_p_p_1af0be644c9e466da786edad451fb16c14">fillMessageBlock</link> (FILE *file, union <link linkend="_unionmessage_block">messageBlock</link> *msgBlock, enum <link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959">status</link> *<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>, uint64_t *numBits)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca"/><section>
    <title>SHA256CPP()</title>
<indexterm><primary>SHA256CPP</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>SHA256CPP</secondary></indexterm>
<para><computeroutput>SHA256CPP::SHA256CPP ( )</computeroutput></para><para>

<para>Construct a new <link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP::SHA256CPP</link> object. </para>
</para>
<programlisting linenumbering="unnumbered">8 {}
</programlisting></section>
<anchor xml:id="_class_s_h_a256_c_p_p_1aff6f658beaeaa61fb3f31bc0c8517be6"/><section>
    <title>~SHA256CPP()</title>
<indexterm><primary>~SHA256CPP</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>~SHA256CPP</secondary></indexterm>
<para><computeroutput>SHA256CPP::~SHA256CPP ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destroy the <link linkend="_class_s_h_a256_c_p_p_1ac2f738d58ae8cbc5ee99963adaf538ca">SHA256CPP::SHA256CPP</link> object. </para>
</para>
<programlisting linenumbering="unnumbered">14 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_s_h_a256_c_p_p_1a5064c84992660bbd9e98f46511d780d8"/><section>
    <title>calcFileSize()</title>
<indexterm><primary>calcFileSize</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>calcFileSize</secondary></indexterm>
<para><computeroutput>int SHA256CPP::calcFileSize (FILE * file)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
352 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prev=ftell(file);
353 &#32;&#32;&#32;&#32;fseek(file,&#32;0L,&#32;SEEK_END);
354 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size=ftell(file);
355 &#32;&#32;&#32;&#32;fseek(file,prev,SEEK_SET);&#32;
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
357 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a5064c84992660bbd9e98f46511d780d8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1a9466f56550cb9725c8fd6be92e5c1b77"/><section>
    <title>calculateHash()</title>
<indexterm><primary>calculateHash</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>calculateHash</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash_values">HashValues</link> SHA256CPP::calculateHash (FILE * file)</computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_struct_hash_values">HashValues</link> </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variables</emphasis>
53 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;current&#32;message&#32;block</emphasis>
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis><link linkend="_unionmessage_block">messageBlock</link>&#32;msgBlock;
55 
56 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;bits&#32;read&#32;from&#32;the&#32;file</emphasis>
57 &#32;&#32;&#32;&#32;uint64_t&#32;numBits&#32;=&#32;0;
58 
59 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;state&#32;of&#32;the&#32;program</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959">status</link>&#32;<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959acb9be765f361bb7efb9073730aac92c6">READ</link>;
61 
62 &#32;&#32;&#32;&#32;<emphasis role="comment">//printf(&quot;\n&#32;Starting&#32;SHA256&#32;algorithm....\n&quot;);</emphasis>
63 
64 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Declare&#32;the&#32;K&#32;constant</emphasis>
65 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Defined&#32;in&#32;Section&#32;4.2.2</emphasis>
66 &#32;&#32;&#32;&#32;uint32_t&#32;K[]&#32;=
67 &#32;&#32;&#32;&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x428a2f98,&#32;0x71374491,&#32;0xb5c0fbcf,&#32;0xe9b5dba5,&#32;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3956c25b,&#32;0x59f111f1,&#32;0x923f82a4,&#32;0xab1c5ed5,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd807aa98,&#32;0x12835b01,&#32;0x243185be,&#32;0x550c7dc3,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x72be5d74,&#32;0x80deb1fe,&#32;0x9bdc06a7,&#32;0xc19bf174,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xe49b69c1,&#32;0xefbe4786,&#32;0x0fc19dc6,&#32;0x240ca1cc,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x2de92c6f,&#32;0x4a7484aa,&#32;0x5cb0a9dc,&#32;0x76f988da,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x983e5152,&#32;0xa831c66d,&#32;0xb00327c8,&#32;0xbf597fc7,&#32;
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xc6e00bf3,&#32;0xd5a79147,&#32;0x06ca6351,&#32;0x14292967,&#32;
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x27b70a85,&#32;0x2e1b2138,&#32;0x4d2c6dfc,&#32;0x53380d13,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x650a7354,&#32;0x766a0abb,&#32;0x81c2c92e,&#32;0x92722c85,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xa2bfe8a1,&#32;0xa81a664b,&#32;0xc24b8b70,&#32;0xc76c51a3,
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xd192e819,&#32;0xd6990624,&#32;0xf40e3585,&#32;0x106aa070,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x19a4c116,&#32;0x1e376c08,&#32;0x2748774c,&#32;0x34b0bcb5,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x391c0cb3,&#32;0x4ed8aa4a,&#32;0x5b9cca4f,&#32;0x682e6ff3,&#32;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x748f82ee,&#32;0x78a5636f,&#32;0x84c87814,&#32;0x8cc70208,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x90befffa,&#32;0xa4506ceb,&#32;0xbef9a3f7,&#32;0xc67178f2
84 &#32;&#32;&#32;&#32;};
85 
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Message&#32;schedule</emphasis>
87 &#32;&#32;&#32;&#32;uint32_t&#32;W[64];
88 
89 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Working&#32;variables</emphasis>
90 &#32;&#32;&#32;&#32;uint32_t&#32;a,&#32;b,&#32;c,&#32;d,&#32;e,&#32;f,&#32;g,&#32;h;
91 
92 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Temp&#32;variables</emphasis>
93 &#32;&#32;&#32;&#32;uint32_t&#32;T1;
94 &#32;&#32;&#32;&#32;uint32_t&#32;T2;
95 
96 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Hash&#32;values</emphasis>
97 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Taken&#32;from&#32;https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf</emphasis>
98 &#32;&#32;&#32;&#32;<emphasis role="comment">//array&lt;uint32_t,8&gt;&#32;H;</emphasis>
99 &#32;&#32;&#32;&#32;<emphasis role="comment">//static&#32;uint32_t&#32;H[8];</emphasis>
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_hash_values">HashValues</link>&#32;HVals;
101 &#32;&#32;&#32;&#32;HVals.<link linkend="_struct_hash_values_1a33327f22884b787dcb01088a9fb847a4">H</link>[0]&#32;=&#32;0x6a09e667;
102 &#32;&#32;&#32;&#32;HVals.H[1]&#32;=&#32;0xbb67ae85;
103 &#32;&#32;&#32;&#32;HVals.H[2]&#32;=&#32;0x3c6ef372;
104 &#32;&#32;&#32;&#32;HVals.H[3]&#32;=&#32;0xa54ff53a;
105 &#32;&#32;&#32;&#32;HVals.H[4]&#32;=&#32;0x510e527f;
106 &#32;&#32;&#32;&#32;HVals.H[5]&#32;=&#32;0x9b05688c;
107 &#32;&#32;&#32;&#32;HVals.H[6]&#32;=&#32;0x1f83d9ab;
108 &#32;&#32;&#32;&#32;HVals.H[7]&#32;=&#32;0x5be0cd19;
109 
110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;current&#32;message&#32;block</emphasis>
111 
112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;loop&#32;to&#32;iterate&#32;through&#32;the&#32;message&#32;block&#32;</emphasis>
113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j;
114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;o;
115 
116 &#32;&#32;&#32;&#32;<emphasis role="comment">//printf(&quot;\n&#32;Initalized&#32;variables...&#32;Entering&#32;loops\n&quot;);</emphasis>
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<link linkend="_class_s_h_a256_c_p_p_1af0be644c9e466da786edad451fb16c14">fillMessageBlock</link>(file,&#32;&amp;msgBlock,&#32;&amp;<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>,&#32;&amp;numBits))
119 &#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j=0;&#32;j&lt;16;&#32;j++)
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fist&#32;check&#32;for&#32;big&#32;or&#32;little&#32;endian</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;our&#32;system&#32;is&#32;big&#32;endian&#32;we&#32;dont&#32;need&#32;to&#32;do&#32;any&#32;conversion</emphasis>
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_s_h_a256_c_p_p_1acd60e2902a86486cd8c0c730b22ec34d">endianCheck</link>()==<emphasis role="keyword">true</emphasis>)
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;W[j]&#32;=&#32;msgBlock.t[j];
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;current&#32;message&#32;block&#32;to&#32;our&#32;messag&#32;schedule</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;to&#32;big&#32;endian&#32;first</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;W[j]&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1af69af86b63bfa5f9ae02b9ade66929e9">byteSwap32</link>(msgBlock.t[j]);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j=16;&#32;j&lt;64;&#32;j++)
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;1</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;W[j]&#32;=&#32;<link linkend="_class_s_h_a256_c_p_p_1ad8bbe4f9babe02201d94d63fd65cc832">sig1</link>(W[j-2])&#32;+&#32;W[j-7]&#32;+&#32;<link linkend="_class_s_h_a256_c_p_p_1ac70dfb32d56867b6f8790242c3202c06">sig0</link>(W[j-15])&#32;+&#32;W[j-16];
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
142 
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initalize&#32;a..h</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;2</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a=HVals.H[0];
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b=HVals.H[1];
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c=HVals.H[2];
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d=HVals.H[3];
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e=HVals.H[4];
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f=HVals.H[5];
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g=HVals.H[6];
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h=HVals.H[7];
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;loop</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;3</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;64;&#32;j++)
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Creating&#32;new&#32;variables</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T1&#32;=&#32;h&#32;+&#32;<link linkend="_class_s_h_a256_c_p_p_1ad8ea0d3bc89a2622dd230b9fb42c8463">SIG1</link>(e)&#32;+&#32;<link linkend="_class_s_h_a256_c_p_p_1a4f63d4fc8d0f9267cd3d4c70fb61b2f3">Ch</link>(e,f,g)&#32;+&#32;K[j]&#32;+&#32;W[j];
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T2&#32;=&#32;<link linkend="_class_s_h_a256_c_p_p_1ae5224ffbd7fb6ab5d05a846e3c7e4bd3">SIG0</link>(a)&#32;+&#32;<link linkend="_class_s_h_a256_c_p_p_1a76c44344a60f168d02bf8a5888bf02ad">Maj</link>(a,b,c);
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;=&#32;g;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g&#32;=&#32;f;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;=&#32;e;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e&#32;=&#32;d&#32;+&#32;T1;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;c;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;b;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;a;
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;T1&#32;+&#32;T2;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Step&#32;4</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[0]&#32;=&#32;a&#32;+&#32;HVals.H[0];
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[1]&#32;=&#32;b&#32;+&#32;HVals.H[1];
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[2]&#32;=&#32;c&#32;+&#32;HVals.H[2];
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[3]&#32;=&#32;d&#32;+&#32;HVals.H[3];
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[4]&#32;=&#32;e&#32;+&#32;HVals.H[4];
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[5]&#32;=&#32;f&#32;+&#32;HVals.H[5];
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[6]&#32;=&#32;g&#32;+&#32;HVals.H[6];
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HVals.H[7]&#32;=&#32;h&#32;+&#32;HVals.H[7];
181 &#32;&#32;&#32;&#32;
182 &#32;&#32;&#32;&#32;}<emphasis role="comment">//&#32;end&#32;while</emphasis>
183 &#32;&#32;&#32;&#32;
184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HVals;
185 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a9466f56550cb9725c8fd6be92e5c1b77_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a9466f56550cb9725c8fd6be92e5c1b77_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1a4f63d4fc8d0f9267cd3d4c70fb61b2f3"/><section>
    <title>Ch()</title>
<indexterm><primary>Ch</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>Ch</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::Ch (uint32_t x, uint32_t y, uint32_t z)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Choose. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>z</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">437 {
438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((x&#32;&amp;&#32;y)&#32;^&#32;(~(x)&amp;z));
439 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a4f63d4fc8d0f9267cd3d4c70fb61b2f3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1acd60e2902a86486cd8c0c730b22ec34d"/><section>
    <title>endianCheck()</title>
<indexterm><primary>endianCheck</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>endianCheck</secondary></indexterm>
<para><computeroutput>bool SHA256CPP::endianCheck ( )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>true </para>

<para>false </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
36 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;1;
37 
38 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*(<emphasis role="keywordtype">char</emphasis>&#32;*)&amp;num&#32;==&#32;1)&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
40 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
42 &#32;&#32;&#32;&#32;}
43 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_acd60e2902a86486cd8c0c730b22ec34d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1af6bbbbc8eb2d1d2ce127d9ee41f80d43"/><section>
    <title>endianCheckPrint()</title>
<indexterm><primary>endianCheckPrint</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>endianCheckPrint</secondary></indexterm>
<para><computeroutput>void SHA256CPP::endianCheckPrint ( )</computeroutput></para><programlisting linenumbering="unnumbered">20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;1;
22 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*(<emphasis role="keywordtype">char</emphasis>&#32;*)&amp;num&#32;==&#32;1)&#32;{
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&#32;Your&#32;system&#32;is&#32;Little-Endian!\n&quot;</emphasis>);
24 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Your&#32;system&#32;is&#32;Big-Endian!\n&quot;</emphasis>);
26 &#32;&#32;&#32;&#32;}
27 };
</programlisting></section>
<anchor xml:id="_class_s_h_a256_c_p_p_1af0be644c9e466da786edad451fb16c14"/><section>
    <title>fillMessageBlock()</title>
<indexterm><primary>fillMessageBlock</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>fillMessageBlock</secondary></indexterm>
<para><computeroutput>int SHA256CPP::fillMessageBlock (FILE * file, union <link linkend="_unionmessage_block">messageBlock</link> * msgBlock, enum <link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959">status</link> * state, uint64_t * numBits)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>msgBlock</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>state</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>numBits</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered{
197 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variables</emphasis>
198 &#32;&#32;&#32;&#32;uint64_t&#32;numBytes;
199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
200 
201 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&apos;ve&#32;finished&#32;padding&#32;and&#32;processing&#32;all&#32;the&#32;message&#32;blocks,&#32;exit</emphasis>
202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;==&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a8b9af67858708d770f017e4aae85900d">FINISH</link>)
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//printf(&quot;\n&#32;State&#32;=&#32;FINISH.\n&quot;);</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
206 &#32;&#32;&#32;&#32;}
207 
208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;our&#32;PAD0&#32;and&#32;PAD1&#32;states</emphasis>
209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;we&#32;need&#32;another&#32;block&#32;full&#32;of&#32;padding</emphasis>
210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;==&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a24c954e013ccb8f230031742d8193f55">PAD0</link>&#32;||&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;==&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a7af380b5255ed8fbb4f1943b92048b15">PAD1</link>)
211 &#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//printf(&quot;\n&#32;State&#32;=&#32;PAD0&#32;or&#32;PAD1.\n&quot;);</emphasis>
213 
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;first&#32;56&#32;bytes&#32;to&#32;all&#32;zero&#32;bits</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&lt;56;&#32;i++)
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[i]&#32;=&#32;0x00;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;last&#32;64&#32;bits&#32;to&#32;an&#32;integer&#32;(should&#32;be&#32;big&#32;endian)</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a650ca0815e457fcda932238399372548">s</link>[7]&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a317cf659e36d8c74574a1617e1c6bce1">byteSwap64</link>(*numBits);
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;state&#32;to&#32;finish</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a8b9af67858708d770f017e4aae85900d">FINISH</link>;
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;state&#32;is&#32;PAD1,&#32;set&#32;the&#32;first&#32;bit&#32;of&#32;msgBlock&#32;to&#32;1</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;==&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a7af380b5255ed8fbb4f1943b92048b15">PAD1</link>)
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x80&#32;=&#32;10000000</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[0]&#32;=&#32;0x80;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keep&#32;the&#32;loop&#32;in&#32;SHA256&#32;going&#32;for&#32;one&#32;more&#32;iteration</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
235 &#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;bytes&#32;instead&#32;of&#32;characters</emphasis>
238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;until&#32;the&#32;end&#32;of&#32;the&#32;file</emphasis>
239 &#32;&#32;&#32;&#32;numBytes&#32;=&#32;fread(msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>,&#32;1,&#32;64,&#32;file);
240 &#32;&#32;&#32;&#32;
241 &#32;&#32;&#32;&#32;
242 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Keep&#32;track&#32;of&#32;the&#32;number&#32;of&#32;bytes&#32;we&apos;ve&#32;read</emphasis>
243 &#32;&#32;&#32;&#32;*numBits&#32;=&#32;*numBits&#32;+&#32;(numBytes&#32;*&#32;8);
244 &#32;&#32;&#32;&#32;
245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;theres&#32;enough&#32;room&#32;to&#32;finish&#32;the&#32;padding</emphasis>
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(numBytes&#32;&lt;&#32;56)
247 &#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x80&#32;=&#32;10000000</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;one&#32;bit,&#32;as&#32;per&#32;the&#32;standard&#32;before&#32;padding&#32;with&#32;0s</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[numBytes]&#32;=&#32;0x80;
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;0&#32;bits&#32;until&#32;the&#32;last&#32;64&#32;bits</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(numBytes&#32;&lt;&#32;56)
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;index&#32;into&#32;our&#32;block</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numBytes&#32;=&#32;numBytes&#32;+1;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;enough&#32;zeroes&#32;so&#32;that&#32;there&#32;are&#32;64&#32;bits&#32;left&#32;at&#32;the&#32;end</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[numBytes]&#32;=&#32;0x00;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
261 
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;length&#32;of&#32;the&#32;file&#32;in&#32;bits&#32;as&#32;a&#32;(Should&#32;be&#32;big&#32;endian)&#32;unsigned&#32;64&#32;bit&#32;int</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a650ca0815e457fcda932238399372548">s</link>[7]&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a317cf659e36d8c74574a1617e1c6bce1">byteSwap64</link>(*numBits);
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Change&#32;the&#32;state&#32;of&#32;our&#32;program</emphasis>
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a8b9af67858708d770f017e4aae85900d">FINISH</link>;
267 &#32;&#32;&#32;&#32;}
268 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;check&#32;if&#32;we&#32;can&#32;put&#32;some&#32;padding&#32;into&#32;this&#32;message&#32;block</emphasis>
269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(numBytes&#32;&lt;&#32;64)
270 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;state&#32;to&#32;PAD0</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a24c954e013ccb8f230031742d8193f55">PAD0</link>;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x80&#32;=&#32;10000000</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;one&#32;bit&#32;into&#32;the&#32;current&#32;message&#32;block</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[numBytes]&#32;=&#32;0x80;
277 
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pad&#32;the&#32;rest&#32;of&#32;the&#32;message&#32;block&#32;with&#32;0&#32;bits</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(numBytes&#32;&lt;&#32;64)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numBytes&#32;=&#32;numBytes&#32;+&#32;1;
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgBlock-&gt;<link linkend="_unionmessage_block_1a59107a6d1bbc97a38c8eeafc29474a96">e</link>[numBytes]&#32;=&#32;0x00;
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
284 &#32;&#32;&#32;&#32;}
285 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise&#32;if&#32;we&apos;re&#32;at&#32;the&#32;end&#32;of&#32;the&#32;file,&#32;need&#32;to&#32;create&#32;a&#32;new&#32;message&#32;block&#32;full&#32;of&#32;padding</emphasis>
286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(feof(file))
287 &#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;state&#32;to&#32;PAD1</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;a&#32;message&#32;Block&#32;full&#32;of&#32;padding</emphasis>
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_mysqlcontroller_8cpp_1a89f234133d3efe315836311cbf21c64b">state</link>&#32;=&#32;<link linkend="__s_h_a256_c_p_p_8h_1a015eb90e0de9f16e87bd149d4b9ce959a7af380b5255ed8fbb4f1943b92048b15">PAD1</link>;
291 &#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;
293 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;padding</emphasis>
294 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
295 <emphasis role="comment">&#32;&#32;&#32;&#32;printf(&quot;\n---&#32;PADDING&#32;---&#32;\n&quot;);</emphasis>
296 <emphasis role="comment">&#32;&#32;&#32;&#32;for&#32;(int&#32;i=0;&#32;i&lt;64;&#32;i++)</emphasis>
297 <emphasis role="comment">&#32;&#32;&#32;&#32;{</emphasis>
298 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;%x&quot;,&#32;msgBlock.e[i]);</emphasis>
299 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
300 <emphasis role="comment">&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
301 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
303 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_af0be644c9e466da786edad451fb16c14_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1a76c44344a60f168d02bf8a5888bf02ad"/><section>
    <title>Maj()</title>
<indexterm><primary>Maj</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>Maj</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::Maj (uint32_t x, uint32_t y, uint32_t z)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Majority decision. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>z</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">450 {
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((x&#32;&amp;&#32;y)&#32;^&#32;(x&#32;&amp;&#32;z)&#32;^&#32;(y&#32;&amp;&#32;z));
452 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a76c44344a60f168d02bf8a5888bf02ad_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1accf77858eb3d4019f13d1e9c40dc9a73"/><section>
    <title>printFileContents()</title>
<indexterm><primary>printFileContents</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>printFileContents</secondary></indexterm>
<para><computeroutput>void SHA256CPP::printFileContents (FILE * fileForPrinting)</computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fileForPrinting</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variables</emphasis>
312 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;fileContents[<link linkend="__s_h_a256_c_p_p_8h_1ac1535592e39e7edf0cafbd5e695ea622">MAXCHAR</link>];
313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;fileContentsAsString[<link linkend="__s_h_a256_c_p_p_8h_1ac1535592e39e7edf0cafbd5e695ea622">MAXCHAR</link>];
314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;fileSize;
315 
316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;to&#32;make&#32;sure&#32;the&#32;file&#32;could&#32;be&#32;found</emphasis>
317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fileForPrinting&#32;==&#32;NULL){
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&#32;Could&#32;not&#32;open&#32;file&quot;</emphasis>);
319 &#32;&#32;&#32;&#32;}
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
321 &#32;&#32;&#32;&#32;{
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;size&#32;of&#32;the&#32;file</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileSize&#32;=&#32;<link linkend="_class_s_h_a256_c_p_p_1a5064c84992660bbd9e98f46511d780d8">calcFileSize</link>(fileForPrinting);
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&#32;File&#32;Size&#32;(characters):&#32;%d&#32;\n&quot;</emphasis>,&#32;fileSize);
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&#32;=============&#32;File&#32;Contents&#32;=============&#32;\n&quot;</emphasis>);
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;While&#32;there&#32;is&#32;still&#32;stuff&#32;to&#32;read&#32;from&#32;the&#32;file</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(fgets(fileContents,&#32;<link linkend="__s_h_a256_c_p_p_8h_1ac1535592e39e7edf0cafbd5e695ea622">MAXCHAR</link>,&#32;fileForPrinting)&#32;!=&#32;NULL)
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;the&#32;contents&#32;of&#32;the&#32;file</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;%s\n&quot;</emphasis>,&#32;fileContents);
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&#32;=========================================&#32;\n&quot;</emphasis>);
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(fileForPrinting);
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Close&#32;the&#32;file&#32;</emphasis>
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
342 &#32;&#32;&#32;&#32;}
343 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_accf77858eb3d4019f13d1e9c40dc9a73_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342"/><section>
    <title>rotr()</title>
<indexterm><primary>rotr</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>rotr</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::rotr (uint32_t x, uint16_t a)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rotate bits right. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>a</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">390 {
391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(x&#32;&gt;&gt;&#32;a)&#32;|&#32;(x&#32;&lt;&lt;&#32;(32&#32;-&#32;a));
392 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ab1a29784c317f21287def4327f83c342_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1a0ba361bc6a4f925454dfcd14fcb95f58"/><section>
    <title>shr()</title>
<indexterm><primary>shr</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>shr</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::shr (uint32_t x, uint16_t b)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Shift bits right. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">402 {
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(x&#32;&gt;&gt;&#32;b);
404 }
</programlisting>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_a0ba361bc6a4f925454dfcd14fcb95f58_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1ac70dfb32d56867b6f8790242c3202c06"/><section>
    <title>sig0()</title>
<indexterm><primary>sig0</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>sig0</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::sig0 (uint32_t x)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">366 {
367 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Section&#32;3.2</emphasis>
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;7)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;18)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1a0ba361bc6a4f925454dfcd14fcb95f58">shr</link>(x,&#32;3));
369 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ac70dfb32d56867b6f8790242c3202c06_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ac70dfb32d56867b6f8790242c3202c06_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1ae5224ffbd7fb6ab5d05a846e3c7e4bd3"/><section>
    <title>SIG0()</title>
<indexterm><primary>SIG0</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>SIG0</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::SIG0 (uint32_t x)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">413 {
414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;2)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;13)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;22));
415 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ae5224ffbd7fb6ab5d05a846e3c7e4bd3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ae5224ffbd7fb6ab5d05a846e3c7e4bd3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1ad8bbe4f9babe02201d94d63fd65cc832"/><section>
    <title>sig1()</title>
<indexterm><primary>sig1</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>sig1</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::sig1 (uint32_t x)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">378 {
379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;17)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;19)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1a0ba361bc6a4f925454dfcd14fcb95f58">shr</link>(x,&#32;10));
380 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ad8bbe4f9babe02201d94d63fd65cc832_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ad8bbe4f9babe02201d94d63fd65cc832_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_s_h_a256_c_p_p_1ad8ea0d3bc89a2622dd230b9fb42c8463"/><section>
    <title>SIG1()</title>
<indexterm><primary>SIG1</primary><secondary>SHA256CPP</secondary></indexterm>
<indexterm><primary>SHA256CPP</primary><secondary>SIG1</secondary></indexterm>
<para><computeroutput>uint32_t SHA256CPP::SIG1 (uint32_t x)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>uint32_t </para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">424 {
425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;6)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;11)&#32;^&#32;<link linkend="_class_s_h_a256_c_p_p_1ab1a29784c317f21287def4327f83c342">rotr</link>(x,&#32;25));
426 }
</programlisting>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ad8ea0d3bc89a2622dd230b9fb42c8463_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_s_h_a256_c_p_p_ad8ea0d3bc89a2622dd230b9fb42c8463_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
